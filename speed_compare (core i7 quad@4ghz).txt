*****************************************************
Processor: Intel(R) Core(TM) i7-4790K CPU @ 4.00GHz (8 CPUs)
System Manufacturer: Apple Inc.
System Model: iMac15,1
Operating System: Windows 8 Pro 64-bit (6.2, Build 9200) (9200.win8_gdr.151230-0600)
Card name: AMD RADEON R9 M290X
Manufacturer: Advanced Micro Devices, Inc.
Chip type: AMD Radeon Graphics Processor (0x6810)
DAC type: Internal DAC(400MHz)
Device Type: Full Device
Display Memory: 5840 MB
Dedicated Memory: 2030 MB
Shared Memory: 3810 MB
*****************************************************

!!!
!!! IMPORTANT: All the results from CompV use assembler code (no intrinsics).
!!!

=== RGB24 -> Grayscale (1282, 720) (#10k times) ===
CompV: 449.ms(full optiz)
OpenCV: 3086.ms(full optiz)
Remarque: For openCV we're using CV_RGB2GRAY

=== YUV420P -> RGB24 (1282, 720) (#10k times) ===
CompV: 968.ms(full optiz)
OpenCV: 5919.ms(full optiz)
Remarque: For openCV we're using CV_YUV2RGB_I420

=== RGB24 -> HSV (1282, 720) (#10k times) ===
CompV: 2137.ms(full optiz)
OpenCV: 15709.ms(full optiz)
Remarque: For openCV we're using CV_RGB2HSV

=== YUV420P -> HSV (1282, 720) (#10k times) ===
CompV: 3045.ms(full optiz)
OpenCV: 32920.ms(full optiz)
Remarque: For OpenCV you need to convert to BGR then HSV (#2 steps: COLOR_YUV2BGR_I420 then CV_BGR2HSV)

=== Histogram on grayscal 8u image (1282 , 720) (#10k times) ===
CompV: 1073.ms(full optiz)
OpenCV: 4114.ms(full optiz)

=== FAST9_16, Nonmax=true, threshold=20, maxfeatures=-1 (1282, 720) (#10k times) ===
CompV: 3358.ms(mt,avx2), 4730.ms(mt,sse2), 8447(st,avx2), 11261.ms(st,sse2)
OpenCV: 10270.ms(full optiz)
Remarque: The way we write to the shared strengths buffer is slow but required to have best support for multithreading.
This is why we are better than OpenCV by faaaaar.
The above numbers means we can run feature detection on HD image at 2977fps while opencv runs at 973fps.
We're using #8 threads and with more threads (e.g. #16) we can go as high as 5000fps

=== Image scaling (Bilinear) from (1282, 720) to (1064, 597), (#10k times) ===
CompV: 1474.ms(mt,avx2), 1866.ms(mt,sse41), 2645.ms(mt,c++), 5435.ms(st,avx2), 6708.ms(st,sse41), 9470.ms(st,c++)
OpenCV: 4148.ms(full optiz)
Remarque: OpenCV uses SSE2 and multithreading and we're faster even with plain c++ (without sse or avx).

=== Gaussian Blur (kernel size = 7, Sigma = 2.0) (1282, 720) (#10k times) ===
CompV(float): 2419.ms(mt,avx2,fma3), 2822.ms(mt,avx2), 5476.ms(mt,sse2), 7874.ms(st,avx2,fma3), 9980.ms(st,avx2), 17527.ms (st,sse2), 23004.ms(mt,c++), 79309.ms(st,c++)
CompV(Fixed): 1367.ms(mt,avx2), 2815.ms(mt,sse2), 4736.ms(st,avx2), 8824.ms(st,sse2), 19741.ms(mt,c++), 70983.ms(st,c++)
OpenCV(float): 16186.ms(full optiz)
Remarque: https://github.com/DoubangoTelecom/compv/issues/118

=== BruteForce matcher (KNN = 2, crosscheck = false, norm = hamming) (200, 258) (#1k times) ===
CompV: 260.ms(mt,asm,sse42), 370.ms(mt,c++,sse42), 837.ms(st,asm,sse42), 1108.ms(st,c++,sse42), 6060.ms (st,c++)
OpenCV: 7384.ms(full optiz)

=== Sobel3x3 (gradx, grady, scaling, adding) (1282, 720) (#10k times) ===
CompV: 7926.ms(full optiz), 127286.ms(st, c++)
OpenCV: 46231.ms(full optiz)
Remarque: Sobel kernels are pre-defined (0, 1 and 2 values) which means we can compute the convolution without using multiplications (add and sub only).
For now sobel convolution not used in commercial products which means not urgent to change the implementaion.

=== Canny edge detector (Kernel size = 3, tLow=0.80f, tHigh=tLow*2) (1282, 720) (#10k times) ===
CompV: 17225.ms(full optiz), 168137.ms(st,c++)
OpenCV: 69368.ms(full optiz)
Remarque: tLow and tHight values are very important for speed comparison(high values -> less time spent in hysterisis and nms)
The test images contains many edges and this is why it's unusually slow. Canny on HD image should last ~1.ms (which means ~1k fps)

=== HoughLines (Canny: Kernel size = 3, tLow=0.80f, tHigh=tLow*2, HoughStd: rho = 1.f, theta = Pi/180, threshold = 100) (1282, 720) (#1k times) ===
CompV(SHT): 11222.ms(full optiz)
CompV(KHT): 2178.ms(full optiz)
OpenCV: 25219.ms(full optiz)
Remarque: Test done with dense image (many non-zero pixels). In normal use case our KHT implementation should work at ~800fps while OpenCV works at ~40fps

