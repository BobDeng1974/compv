*** RGB to YUV conversion: http://www.fourcc.org/fccyvrgb.php ***
Y = (0.257 * R) + (0.504 * G) + (0.098 * B) + 16
Cr = V = (0.439 * R) - (0.368 * G) - (0.071 * B) + 128
Cb = U = -(0.148 * R) - (0.291 * G) + (0.439 * B) + 128
and we know that:
Y = (Y * 256) / 256
V = (V * 256) / 256
U = (U * 256) / 256
=>
Y = ((65.792 * R) + (129.024 * G) + (25.088 * B) + 4096) >> 8
V = ((112.384 * R) + (-94.208 * G) + (-18.176 * B) + 32768) >> 8
U = ((-37.888 * R) + (-74.496 * G) + (112.384 * B) + 32768) >> 8
Numerical approx. =>
Y = (((66 * R) + (129 * G) + (25 * B))) >> 8 + 16
  = (2 * ((33 * R) + (65 * G) + (13 * B))) >> 8 + 2*8
  = (((33 * R) + (65 * G) + (13 * B))) >> 7 + 8
V = (((112 * R) + (-94 * G) + (-18 * B))) >> 8 + 128
U = (((-38 * R) + (-74 * G) + (112 * B))) >> 8 + 128



*** YUV to RGB conversion: http://www.fourcc.org/fccyvrgb.php ***
R = 1.164(Y - 16) + 1.596(V - 128)
G = 1.164(Y - 16) - 0.813(V - 128) - 0.391(U - 128)
B = 1.164(Y - 16) + 2.018(U - 128)
and we know that:
R = (R * 64) / 64
G = (G * 64) / 64
B = (B * 64) / 64
=>
R*64 = 74(Y - 16) + 102(V - 128)
G*64 = 74(Y - 16) - 52(V - 128) - 25(U - 128)
B*64 = 74(Y - 16) + 129(U - 128)
=>
R*64 = 74Y' + 0U' + 102V'
G*64 = 74Y' - 25U' - 52V'
B*64 = 74Y' + 129U' + 0V'
where Y'=(Y - 16), U'=(U - 128), V'=(V - 128)
=>
R*32 = 37Y' + 0U' + 51V'
G*32 = 37Y' - 13U' - 26V'
B*32 = 37Y' + 65U' + 0V'
=>
R = (37Y' + 0U' + 51V') >> 5
G = (37Y' - 13U' - 26V') >> 5
B = (37Y' + 65U' + 0V') >> 5
R, G and B must be clamped(0, 255)







